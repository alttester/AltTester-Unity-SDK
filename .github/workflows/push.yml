name: Push

on: [push, workflow_dispatch]

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  paths-filter:
    runs-on: ubuntu-latest
    outputs:
      java: ${{ steps.filter.outputs.java }}
      python: ${{ steps.filter.outputs.python }}
      csharp: ${{ steps.filter.outputs.csharp }}
      editor: ${{ steps.filter.outputs.editor }}
      docs: ${{ steps.filter.outputs.docs }}
      scenes: ${{steps.filter.outputs.scenes}}
      proxy: ${{steps.filter.outputs.proxy}}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            java:
              - 'Bindings~/java/**'
            python:
              - 'Bindings~/python/**'
            csharp:
              - '**.cs'
            editor:
              - '**.cs'
            docs:
              - 'Docs/**'
            scenes:
              - 'Assets/AltTester/Examples/Scenes/**'
            proxy:
              - 'Assets/AltTester/Runtime/AltDriver/Proxy/**'

  build-docs:
    runs-on: ubuntu-latest
    needs: paths-filter
    if: needs.paths-filter.outputs.docs == 'true'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          pip install -r "Docs/requirements.txt"
      - name: Build docs
        run: |
          cd Docs
          make versionedhtml
      - uses: actions/upload-artifact@v3
        with:
          name: DocumentationHTML
          path: Docs/build/
      - uses: ravsamhq/notify-slack-action@2.3.0
        if: ${{ always() && github.ref_name == 'development' }}
        with:
          status: ${{ job.status }}
          notification_title: "The Job *{job}* in Workflow *{workflow}* has {status_message}"
          message_format: "{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}@{branch}> on <{commit_url}|{commit_sha}>"
          footer: "Linked Repo <{repo_url}|{repo}>"
          notify_when: "failure"
          mention_groups: "alttester,!here"
          mention_groups_when: "failure"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK }}

  build-macOS:
    runs-on: [self-hosted, macOS]
    needs: paths-filter
    if: needs.paths-filter.outputs.csharp == 'true' || needs.paths-filter.outputs.scenes == 'true' || needs.paths-filter.outputs.python == 'true' || needs.paths-filter.outputs.java == 'true'
    steps:
      - uses: actions/checkout@v3

      - name: Build SampleGame
        run: |
          export ALTSERVER_PORT=13005
          export ALTSERVER_HOST="192.168.11.35"
          $UNITY_2021_3_HOME -batchmode -stackTraceLogType None -projectPath $CI_PROJECT_DIR -executeMethod AltTesterTools.BuildAltTester.MacBuildFromCommandLine -logFile buildMac.log -quit

      - uses: actions/upload-artifact@v3
        if: always() # run this step even if one of the previous step failed
        with:
          name: BuildMacArtifact
          path: |
            sampleGame.app
            **/*.log

      - uses: ravsamhq/notify-slack-action@2.3.0
        if: ${{ always() && github.ref_name == 'development' }}
        with:
          status: ${{ job.status }}
          notification_title: "The Job *{job}* in Workflow *{workflow}* has {status_message}"
          message_format: "{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}@{branch}> on <{commit_url}|{commit_sha}>"
          footer: "Linked Repo <{repo_url}|{repo}>"
          notify_when: "failure"
          mention_groups: "alttester,!here"
          mention_groups_when: "failure"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK }}

  build-android:
    runs-on: [self-hosted, macOS]
    needs: paths-filter

    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/development' || needs.paths-filter.outputs.proxy == 'true' || needs.paths-filter.outputs.scenes == 'true' || needs.paths-filter.outputs.python == 'true'

    steps:
      - uses: actions/checkout@v3

      - name: Build SampleGame apk
        run: |
          $UNITY_2021_3_HOME -batchmode -stackTraceLogType None -projectPath $CI_PROJECT_DIR -executeMethod AltTesterTools.BuildAltTester.AndroidBuildFromCommandLine -logFile buildAndroid.log -quit

      - uses: actions/upload-artifact@v3
        if: always() # run this step even if one of the previous step failed
        with:
          name: BuildAndroidArtifact
          path: |
            sampleGame.apk
            **/*.log
      - uses: ravsamhq/notify-slack-action@2.3.0
        if: ${{ always() && github.ref_name == 'development' }}
        with:
          status: ${{ job.status }}
          notification_title: "The Job *{job}* in Workflow *{workflow}* has {status_message}"
          message_format: "{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}@{branch}> on <{commit_url}|{commit_sha}>"
          footer: "Linked Repo <{repo_url}|{repo}>"
          notify_when: "failure"
          mention_groups: "alttester,!here"
          mention_groups_when: "failure"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK }}

  build-ipa:
      runs-on: [self-hosted, macOS]
      needs: paths-filter
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/development' || needs.paths-filter.outputs.proxy == 'true' || needs.paths-filter.outputs.scenes == 'true' || needs.paths-filter.outputs.python == 'true'
      steps:
        - uses: actions/checkout@v3

        - name: Build sampleGame ipa
          run: |
            $UNITY_2021_3_HOME -batchmode -stackTraceLogType None -projectPath -executeMethod AltTesterTools.BuildAltTester.IosBuildFromCommandLine -logFile buildiOS.log -quit
            xcodebuild -project ./sampleGame/Unity-iPhone.xcodeproj -scheme Unity-iPhone -archivePath Unity-iPhone.xcarchive archive
            xcodebuild -exportArchive -archivePath ./Unity-iPhone.xcarchive -exportOptionsPlist $EXPORT_OPTIONS_LOCATION/export-options.plist -exportPath ./
            osascript -e 'tell app "Xcode" to quit'

        - uses: actions/upload-artifact@v3
          if: always() # run this step even if one of the previous step failed
          with:
            name: BuildiOSArtifact
            path: |
              sampleGame.ipa
              **/*.log
        - uses: ravsamhq/notify-slack-action@2.3.0
          if: ${{ always() && github.ref_name == 'development' }}    
          with:
            status: ${{ job.status }}
            notification_title: "The Job *{job}* in Workflow *{workflow}* has {status_message}"
            message_format: "{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}@{branch}> on <{commit_url}|{commit_sha}>"
            footer: "Linked Repo <{repo_url}|{repo}>"
            notify_when: "failure"
            mention_groups: "alttester,!here"
            mention_groups_when: "failure"
          env:
            SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK }}

  test-CSharp-Editor:
    runs-on: [self-hosted, macOS]
    needs: build-macOS
    if: needs.paths-filter.outputs.csharp == 'true' || needs.paths-filter.outputs.scenes == 'true' || needs.paths-filter.outputs.python == 'true' || needs.paths-filter.outputs.java == 'true'
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: BuildMacArtifact

      - run: |
          export ALTSERVER_PORT=13005
          export ALTSERVER_HOST="192.168.11.35"
          chmod -R 755 sampleGame.app
          open sampleGame.app
      - run: |
          export ALTSERVER_PORT=13005
          export ALTSERVER_HOST="192.168.11.35"
          $UNITY_2021_3_HOME -batchmode -stackTraceLogType None -projectPath $CI_PROJECT_DIR -executeMethod AltTester.AltTesterUnitySDK.Editor.AltTestRunner.RunTestFromCommandLine -testsAssembly Assembly-CSharp-Editor  -logFile - -quit
      #TODO add back -reportPath $CI_PROJECT_DIR/reportTest.xml for removing because it's giving me unauthorized error
      - uses: actions/upload-artifact@v3
        if: always() # run this step even if one of the previous step failed
        with:
          name: TestCSharpArtifact
          path: |
            **/*.log
            **/*.log
            reportTest.xml

      - uses: ravsamhq/notify-slack-action@2.3.0
        if: ${{ always() && github.ref_name == 'development' }}
        with:
          status: ${{ job.status }}
          notification_title: "The Job *{job}* in Workflow *{workflow}* has {status_message}"
          message_format: "{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}@{branch}> on <{commit_url}|{commit_sha}>"
          footer: "Linked Repo <{repo_url}|{repo}>"
          notify_when: "failure"
          mention_groups: "alttester,!here"
          mention_groups_when: "failure"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK }}

  test-DotNet:
    runs-on: [self-hosted, macOS]
    needs: build-macOS
    if: needs.paths-filter.outputs.csharp == 'true' || needs.paths-filter.outputs.scenes == 'true'
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: BuildMacArtifact

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v2.1.1

      - run: |
          export ALTSERVER_PORT=13005
          echo $ALTSERVER_PORT
          export ALTSERVER_HOST="192.168.11.35"
          chmod -R 755  sampleGame.app
          open sampleGame.app
          dotnet test Bindings~/dotnet/AltDriver.Tests/AltDriver.Tests.csproj --logger:"console;verbosity=detailed"

      - uses: actions/upload-artifact@v3
        if: always() # run this step even if one of the previous step failed
        with:
          name: TestCSharpArtifact
          path: "**/*.log"

      - uses: ravsamhq/notify-slack-action@2.3.0
        if: ${{ always() && github.ref_name == 'development' }}
        with:
          status: ${{ job.status }}
          notification_title: "The Job *{job}* in Workflow *{workflow}* has {status_message}"
          message_format: "{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}@{branch}> on <{commit_url}|{commit_sha}>"
          footer: "Linked Repo <{repo_url}|{repo}>"
          notify_when: "failure"
          mention_groups: "alttester,!here"
          mention_groups_when: "failure"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK }}

  test-Python:
    runs-on: [self-hosted, macOS]
    needs: build-macOS
    if: needs.paths-filter.outputs.python == 'true' || needs.paths-filter.outputs.scenes == 'true'
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: BuildMacArtifact

      - name: Open application
        run: |
          export RUN_IN_BROWSERSTACK="false"
          export ALTSERVER_PORT=13005
          export ALTSERVER_HOST="192.168.11.35"
          chmod -R 755 sampleGame.app
          open sampleGame.app

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install --upgrade pip setuptools wheel
          pip uninstall AltTester-Driver
          pip install -r "Bindings~/python/requirements.txt"
          pip install -r "Bindings~/python/requirements-dev.txt"
          pip install -e "Bindings~/python" --root "Bindings~/python"

      - name: Lint with flake8
        run: |
          flake8 Bindings~/python/ --config Bindings~/python/.flake8

      - name: Run unit tests
        run: |
          pytest Bindings~/python/tests/unit

      - name: Run integration tests
        run: |
          export ALTSERVER_PORT=13005
          export ALTSERVER_HOST="192.168.11.35"
          allure generate
          pytest -s -v --alluredir=allure-report/ Bindings~/python/tests/integration

      - name: Generate Allure report
        if: always()  
        run: |
          allure generate -c allure-report -o allure-results-html
          allure-combine ./allure-results-html

      - uses: actions/upload-artifact@v3
        if: always() # run this step even if one of the previous step failed
        with:
          name: TestPythonArtifact
          path: |
              **/*.log
              ./allure-results-html/complete.html

      - uses: ravsamhq/notify-slack-action@2.3.0
        if: ${{ always() && github.ref_name == 'development' }}
        with:
          status: ${{ job.status }}
          notification_title: "The Job *{job}* in Workflow *{workflow}* has {status_message}"
          message_format: "{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}@{branch}> on <{commit_url}|{commit_sha}>"
          footer: "Linked Repo <{repo_url}|{repo}>"
          notify_when: "failure"
          mention_groups: "alttester,!here"
          mention_groups_when: "failure"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK }}

  test-Java:
    runs-on: [self-hosted, macOS]
    needs: build-macOS
    if: needs.paths-filter.outputs.java == 'true' || needs.paths-filter.outputs.scenes == 'true'
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: BuildMacArtifact

      - name: Setup Java JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 11

      - name: Set up Maven # setup-java does't install maven on self-hosted driver
        uses: stCarolas/setup-maven@v4.5

      - run: |
          export ALTSERVER_PORT=13005
          echo $ALTSERVER_PORT
          export ALTSERVER_HOST="192.168.11.35"
          chmod -R 755  sampleGame.app
          open sampleGame.app
          cd "Bindings~/java"
          mvn -Dtest=com.alttester.Tests* test
      - uses: actions/upload-artifact@v3
        if: always() # run this step even if one of the previous step failed
        with:
          name: TestJavaArtifact
          path: "**/*.log"

      - uses: ravsamhq/notify-slack-action@2.3.0
        if: ${{ always() && github.ref_name == 'development' }}
        with:
          status: ${{ job.status }}
          notification_title: "The Job *{job}* in Workflow *{workflow}* has {status_message}"
          message_format: "{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}@{branch}> on <{commit_url}|{commit_sha}>"
          footer: "Linked Repo <{repo_url}|{repo}>"
          notify_when: "failure"
          mention_groups: "alttester,!here"
          mention_groups_when: "failure"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK }}

  copyright:
    runs-on: [self-hosted, macOS]
    steps:
      - run: |
          pwsh copyright.ps1

      - uses: ravsamhq/notify-slack-action@2.3.0
        if: ${{ always() && github.ref_name == 'development' }}
        with:
          status: ${{ job.status }}
          notification_title: "The Job *{job}* in Workflow *{workflow}* has {status_message}"
          message_format: "{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}@{branch}> on <{commit_url}|{commit_sha}>"
          footer: "Linked Repo <{repo_url}|{repo}>"
          notify_when: "failure"
          mention_groups: "alttester,!here"
          mention_groups_when: "failure"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK }}

  test-Python-Android-Browserstack:
    runs-on: [self-hosted, macOS]
    needs: build-android

    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/development' || needs.paths-filter.outputs.proxy == 'true' || needs.paths-filter.outputs.scenes == 'true' || needs.paths-filter.outputs.python == 'true'

    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: BuildAndroidArtifact
          
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install --upgrade pip setuptools wheel
          pip uninstall AltTester-Driver
          pip install -r "Bindings~/python/requirements.txt"
          pip install -r "Bindings~/python/requirements-dev.txt"
          pip install -e "Bindings~/python" --root "Bindings~/python"

      - name: Run integration tests
        run: |
          export ALTSERVER_PORT=13005
          export ALTSERVER_HOST="192.168.11.35"
          export RUN_IN_BROWSERSTACK="true"
          export BROWSERSTACK_USERNAME=${{ secrets.BROWSERSTACK_USERNAME }}
          export BROWSERSTACK_KEY=${{ secrets.BROWSERSTACK_KEY }}
          export response=$(curl -u "$BROWSERSTACK_USERNAME:$BROWSERSTACK_KEY" -X POST "https://api-cloud.browserstack.com/app-automate/upload" -F "file=@sampleGame.apk")
          export APP_URL=$(echo "${response}" | jq -r .app_url)
          cd Bindings~/python/tests/integration/android/
          browserstack-sdk pytest -s ../ -v --alluredir=allure-report-galaxy_s22_ultra/ --browserstack.config "galaxy_s22_ultra.yml" > galaxy_s22_ultra.log &
          browserstack-sdk pytest -s ../ -v --alluredir=allure-report-one_plus_9/ --browserstack.config "one_plus_9.yml" > one_plus_9.log &
          browserstack-sdk pytest -s ../ -v --alluredir=allure-report-redmi_note_11/ --browserstack.config "redmi_note_11.yml" > redmi_note_11.log &
          browserstack-sdk pytest -s ../ -v --alluredir=allure-report-google_pixel_9/ --browserstack.config "google_pixel_9.yml" > google_pixel_9.log &
          browserstack-sdk pytest -s ../ -v --alluredir=allure-report-galaxy_s23/ --browserstack.config "galaxy_s23.yml" > galaxy_s23.log &
          wait

      - name: Copy devices log to the current folder  
        run: |
          cp Bindings~/python/tests/integration/android/galaxy_s22_ultra.log .
          cp Bindings~/python/tests/integration/android/one_plus_9.log .
          cp Bindings~/python/tests/integration/android/redmi_note_11.log .
          cp Bindings~/python/tests/integration/android/google_pixel_9.log .
          cp Bindings~/python/tests/integration/android/galaxy_s23.log .

      - name: Generate Allure report
        if: always()  
        run: |
          allure generate -c Bindings~/python/tests/integration/android/allure-report-galaxy_s22_ultra -o allure-results-html-galaxy_s22_ultra
          allure generate -c Bindings~/python/tests/integration/android/allure-report-one_plus_9 -o allure-results-html-one_plus_9
          allure generate -c Bindings~/python/tests/integration/android/allure-report-redmi_note_11 -o allure-results-html-redmi_note_11
          allure generate -c Bindings~/python/tests/integration/android/allure-report-google_pixel_9 -o allure-results-html-google_pixel_9
          allure generate -c Bindings~/python/tests/integration/android/allure-report-galaxy_s23 -o allure-results-html-galaxy_s23

          allure-combine ./allure-results-html-galaxy_s22_ultra
          allure-combine ./allure-results-html-one_plus_9
          allure-combine ./allure-results-html-redmi_note_11
          allure-combine ./allure-results-html-google_pixel_9
          allure-combine ./allure-results-html-galaxy_s23

      - name: Re-check if the tests have failed
        run: |
          pytest --file_to_log="Bindings~/python/tests/integration/android/galaxy_s22_ultra.log" Bindings~/python/tests/re-check.py
          pytest --file_to_log="Bindings~/python/tests/integration/android/one_plus_9.log" Bindings~/python/tests/re-check.py
          pytest --file_to_log="Bindings~/python/tests/integration/android/redmi_note_11.log" Bindings~/python/tests/re-check.py
          pytest --file_to_log="Bindings~/python/tests/integration/android/google_pixel_9.log" Bindings~/python/tests/re-check.py
          pytest --file_to_log="Bindings~/python/tests/integration/android/galaxy_s23.log" Bindings~/python/tests/re-check.py


      - uses: actions/upload-artifact@v3
        if: always() # run this step even if one of the previous step failed
        with:
          name: TestPythonAndroidInBrowserstackArtifact
          path: |
              **/*.log
              ./allure-results-html-galaxy_s22_ultra/complete.html
              ./allure-results-html-one_plus_9/complete.html
              ./allure-results-html-redmi_note_11/complete.html
              ./allure-results-html-google_pixel_9/complete.html
              ./allure-results-html-galaxy_s23/complete.html

      - name: Unset Browserstack Flag
        if: always()
        run: |
          export RUN_IN_BROWSERSTACK="false"
          unset APP_URL
          unset response

      - uses: ravsamhq/notify-slack-action@2.3.0
        if: ${{ always() && github.ref_name == 'development' }}
        with:
          status: ${{ job.status }}
          notification_title: "The Job *{job}* in Workflow *{workflow}* has {status_message}"
          message_format: "{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}@{branch}> on <{commit_url}|{commit_sha}>"
          footer: "Linked Repo <{repo_url}|{repo}>"
          notify_when: "failure"
          mention_groups: "alttester,!here"
          mention_groups_when: "failure"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK }}
          

  test-Python-iOS-Browserstack:
      runs-on: [self-hosted, macOS]
      needs: build-ipa
      if: needs.paths-filter.outputs.python == 'true' || needs.paths-filter.outputs.scenes == 'true'
      steps:
        - uses: actions/checkout@v3

        - uses: actions/download-artifact@v3
          with:
            name: BuildiOSArtifact

        - uses: actions/setup-python@v4
          with:
            python-version: "3.10"

        - name: Install dependencies
          run: |
            pip install --upgrade pip setuptools wheel
            pip uninstall AltTester-Driver
            pip install -r "Bindings~/python/requirements.txt"
            pip install -r "Bindings~/python/requirements-dev.txt"
            pip install -e "Bindings~/python" --root "Bindings~/python"

        - name: Run integration tests
          run: |
            export ALTSERVER_PORT=13005
            export ALTSERVER_HOST="192.168.11.35"
            export RUN_IN_BROWSERSTACK="true"
            export RUN_IOS_IN_BROWSERSTACK="true"
            export BROWSERSTACK_USERNAME=${{ secrets.BROWSERSTACK_USERNAME }}
            export BROWSERSTACK_KEY=${{ secrets.BROWSERSTACK_KEY }}
            export response=$(curl -u "$BROWSERSTACK_USERNAME:$BROWSERSTACK_KEY" -X POST "https://api-cloud.browserstack.com/app-automate/upload" -F "file=@sampleGame.ipa")
            export APP_URL=$(echo "${response}" | jq -r .app_url)
            cd Bindings~/python/tests/integration/iOS/
            browserstack-sdk pytest -s ../ -v --alluredir=allure-report-11_pro_max/ --browserstack.config "11_pro_max.yml" > 11_pro_max.log &
            browserstack-sdk pytest -s ../ -v --alluredir=allure-report-12_pro_max/ --browserstack.config "12_pro_max.yml" > 12_pro_max.log &
            browserstack-sdk pytest -s ../ -v --alluredir=allure-report-13_pro_max/ --browserstack.config "13_pro_max.yml" > 13_pro_max.log &
            browserstack-sdk pytest -s ../ -v --alluredir=allure-report-14_pro_max/ --browserstack.config "14_pro_max.yml" > 14_pro_max.log &
            browserstack-sdk pytest -s ../ -v --alluredir=allure-report-15_pro_max/ --browserstack.config "15_pro_max.yml" > 15_pro_max.log &
            wait 
            
        - name: Copy devices log to the current folder  
          run: |
            cp Bindings~/python/tests/integration/iOS/11_pro_max.log .
            cp Bindings~/python/tests/integration/iOS/12_pro_max.log .
            cp Bindings~/python/tests/integration/iOS/13_pro_max.log .
            cp Bindings~/python/tests/integration/iOS/14_pro_max.log .
            cp Bindings~/python/tests/integration/iOS/15_pro_max.log .

        - name: Generate Allure report
          if: always()  
          run: |
            allure generate -c Bindings~/python/tests/integration/iOS/allure-report-11_pro_max -o allure-results-html-11_pro_max
            allure generate -c Bindings~/python/tests/integration/iOS/allure-report-12_pro_max -o allure-results-html-12_pro_max
            allure generate -c Bindings~/python/tests/integration/iOS/allure-report-13_pro_max -o allure-results-html-13_pro_max
            allure generate -c Bindings~/python/tests/integration/iOS/allure-report-14_pro_max -o allure-results-html-14_pro_max
            allure generate -c Bindings~/python/tests/integration/iOS/allure-report-15_pro_max -o allure-results-html-15_pro_max

            allure-combine ./allure-results-html-11_pro_max
            allure-combine ./allure-results-html-12_pro_max
            allure-combine ./allure-results-html-13_pro_max
            allure-combine ./allure-results-html-14_pro_max
            allure-combine ./allure-results-html-15_pro_max

        - name: Re-check if the tests have failed
          run: |
            pytest --file_to_log="Bindings~/python/tests/integration/iOS/11_pro_max.log" Bindings~/python/tests/re-check.py
            pytest --file_to_log="Bindings~/python/tests/integration/iOS/12_pro_max.log" Bindings~/python/tests/re-check.py
            pytest --file_to_log="Bindings~/python/tests/integration/iOS/13_pro_max.log" Bindings~/python/tests/re-check.py
            pytest --file_to_log="Bindings~/python/tests/integration/iOS/14_pro_max.log" Bindings~/python/tests/re-check.py
            pytest --file_to_log="Bindings~/python/tests/integration/iOS/15_pro_max.log" Bindings~/python/tests/re-check.py

        - uses: actions/upload-artifact@v3
          if: always() # run this step even if one of the previous step failed
          with:
            name: TestPythoniOSInBrowserstackArtifact
            path: |
                **/*.log
                ./allure-results-html-11_pro_max/complete.html
                ./allure-results-html-12_pro_max/complete.html
                ./allure-results-html-13_pro_max/complete.html
                ./allure-results-html-14_pro_max/complete.html
                ./allure-results-html-15_pro_max/complete.html
                ./Bindings~/python/tests/integration/android/11_pro_max.log
                ./Bindings~/python/tests/integration/android/12_pro_max.log
                ./Bindings~/python/tests/integration/android/13_pro_max.log
                ./Bindings~/python/tests/integration/android/14_pro_max.log
                ./Bindings~/python/tests/integration/android/15_pro_max.log

        - name: Unset Browserstack Flag
          if: always()
          run: |
            export RUN_IN_BROWSERSTACK="false"
            export RUN_IOS_IN_BROWSERSTACK="false"
            unset APP_URL
            unset response

        - uses: ravsamhq/notify-slack-action@2.3.0
          if: ${{ always() && github.ref_name == 'development' }}    
          with:
            status: ${{ job.status }}
            notification_title: "The Job *{job}* in Workflow *{workflow}* has {status_message}"
            message_format: "{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}@{branch}> on <{commit_url}|{commit_sha}>"
            footer: "Linked Repo <{repo_url}|{repo}>"
            notify_when: "failure"
            mention_groups: "alttester,!here"
            mention_groups_when: "failure"
          env:
            SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK }}

  deploy-dev-docs:
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/development'

    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: DocumentationHTML
          path: DocumentationHTML/

      - name: Replace URL
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: ${{ secrets.LIVE_URL_ALTTESTER }}
          replace: ${{ secrets.DEV_URL_ALTTESTER }}
          regex: true

      - name: Update AltTester Desktop link for latest version
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: ${{ secrets.DEV_URL_ALTTESTER }}/docs/desktop/.*?/
          replace: ${{ secrets.DEV_URL_ALTTESTER }}/docs/desktop/latest/
          include: "DocumentationHTML/latest/**"

      - name: Upload documentation
        uses: garygrossgarten/github-action-scp@release
        with:
          local: DocumentationHTML
          remote: ${{ secrets.DOCUMENTATION_PATH }}
          host: ${{ secrets.HOST_IP_ALTTESTER }}
          port: ${{ secrets.PORT_DEV_ALTTESTER }}
          username: ${{ secrets.USERNAME_ALTTESTER }}
          password: ${{ secrets.PASSWORD_ALTTESTER }}
          rmRemote: true

      - uses: ravsamhq/notify-slack-action@2.3.0
        if: ${{ always() && github.ref_name == 'development' }}
        with:
          status: ${{ job.status }}
          notification_title: "The Job *{job}* in Workflow *{workflow}* has {status_message}"
          message_format: "{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}@{branch}> on <{commit_url}|{commit_sha}>"
          footer: "Linked Repo <{repo_url}|{repo}>"
          notify_when: "failure"
          mention_groups: "alttester,!here"
          mention_groups_when: "failure"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK }}

  deploy-docs:
    runs-on: ubuntu-latest
    needs: build-docs

    if: github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: DocumentationHTML
          path: DocumentationHTML/

      - name: Update AltTester Desktop link for latest version
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: ${{ secrets.LIVE_URL_ALTTESTER }}/docs/desktop/.*?/
          replace: ${{ secrets.LIVE_URL_ALTTESTER }}/docs/desktop/latest/
          include: "DocumentationHTML/latest/**"

      - name: Upload documentation
        uses: garygrossgarten/github-action-scp@release
        with:
          local: DocumentationHTML
          remote: ${{ secrets.DOCUMENTATION_PATH }}
          host: ${{ secrets.HOST_IP_ALTTESTER }}
          port: ${{ secrets.PORT_LIVE_ALTTESTER }}
          username: ${{ secrets.USERNAME_ALTTESTER }}
          password: ${{ secrets.PASSWORD_ALTTESTER }}
          rmRemote: true

      - uses: ravsamhq/notify-slack-action@2.3.0
        if: ${{ always() && github.ref_name == 'development' }}
        with:
          status: ${{ job.status }}
          notification_title: "The Job *{job}* in Workflow *{workflow}* has {status_message}"
          message_format: "{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}@{branch}> on <{commit_url}|{commit_sha}>"
          footer: "Linked Repo <{repo_url}|{repo}>"
          notify_when: "failure"
          mention_groups: "alttester,!here"
          mention_groups_when: "failure"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK }}
